.PHONY: help upgrade requirements clean quality requirements \
	requirements-test coverage pii_check \
	compile_translations dummy_translations extract_translations \
	fake_translations pull_translations push_translations test test-python \
	test-js quality-python quality-js

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find . -name '*.pyc' -o -name '*.pyo' -o -name '*~' -delete
	rm -fr build/ dist/ *.egg-info
	rm -rf pii_report

define COMMON_CONSTRAINTS_TEMP_COMMENT
# This is a temporary solution to override the real common_constraints.txt\n# In edx-lint, until the pyjwt constraint in edx-lint has been removed.\n# See BOM-2721 for more details.\n# Below is the copied and edited version of common_constraints\n
endef

COMMON_CONSTRAINTS_TXT=requirements/common_constraints.txt
.PHONY: $(COMMON_CONSTRAINTS_TXT)
$(COMMON_CONSTRAINTS_TXT):
	wget -O "$(@)" https://raw.githubusercontent.com/edx/edx-lint/master/edx_lint/files/common_constraints.txt || touch "$(@)"
	echo "$(COMMON_CONSTRAINTS_TEMP_COMMENT)" | cat - $(@) > temp && mv temp $(@)

upgrade: export CUSTOM_COMPILE_COMMAND=make upgrade
upgrade: $(COMMON_CONSTRAINTS_TXT)	## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	# This is a temporary solution to override the real common_constraints.txt
	# In edx-lint, until the pyjwt constraint in edx-lint has been removed.
	# See BOM-271 for more details.
	sed 's/pyjwt\[crypto\]<2.0.0//g' requirements/common_constraints.txt > requirements/common_constraints.tmp
	mv requirements/common_constraints.tmp requirements/common_constraints.txt
	sed 's/edx-drf-extensions<7.0.0//g' requirements/common_constraints.txt > requirements/common_constraints.tmp
	mv requirements/common_constraints.tmp requirements/common_constraints.txt
	pip install -q pip-tools
	pip-compile --rebuild --upgrade -o requirements/base.txt requirements/base.in
	pip-compile --rebuild --upgrade -o requirements/ci.txt requirements/ci.in
	pip-compile --rebuild --upgrade -o requirements/dev.txt requirements/dev.in
	pip-compile --rebuild --upgrade -o requirements/pip.txt requirements/pip.in
	pip-compile --rebuild --upgrade -o requirements/quality.txt requirements/quality.in
	pip-compile --rebuild --upgrade -o requirements/test.txt requirements/test.in
	# Let tox control the Django and djangorestframework versions for tests
	grep -e "^amqp==\|^anyjson==\|^billiard==\|^celery==\|^kombu==\|^click-didyoumean==\|^click-repl==\|^click==\|^prompt-toolkit==\|^vine==" requirements/base.txt > requirements/celery50.txt
	sed -i.tmp '/^[d|D]jango==/d' requirements/test.txt
	sed -i.tmp '/^djangorestframework==/d' requirements/test.txt
	sed -i.tmp '/^amqp==/d' requirements/test.txt
	sed -i.tmp '/^anyjson==/d' requirements/test.txt
	sed -i.tmp '/^billiard==/d' requirements/test.txt
	sed -i.tmp '/^celery==/d' requirements/test.txt
	sed -i.tmp '/^kombu==/d' requirements/test.txt
	sed -i.tmp '/^click-didyoumean==/d' requirements/test.txt
	sed -i.tmp '/^click-repl==/d' requirements/test.txt
	sed -i.tmp '/^click==/d' requirements/test.txt
	sed -i.tmp '/^click==/d' requirements/test.txt
	sed -i.tmp '/^prompt-toolkit==/d' requirements/test.txt
	sed -i.tmp '/^vine==/d' requirements/test.txt
	rm requirements/test.txt.tmp

requirements: ## install development environment requirements
	pip install -qr requirements/dev.txt --exists-action w
	pip-sync requirements/dev.txt requirements/base.txt requirements/private.*

requirements-test: ## install requirements for running tests
	npm install -g gulp-cli
	pip install -qr requirements/test.txt --exists-action w

install: requirements
	./manage.py migrate --settings=test_settings
	npm install

coverage: clean ## generate and view HTML coverage report
	py.test --cov=edx_proctoring --cov-report html --ds=test_settings
	$(BROWSER) htmlcov/index.html

pii_check: ## check for PII annotations on all Django models
	DJANGO_SETTINGS_MODULE=test_settings \
	code_annotations django_find_annotations --config_file .pii_annotations.yml --lint --report --coverage

quality-js: lint-js

quality-python: ## Run python linters
	tox -e quality

quality-rst: ## validate rst files
	rstcheck -r --report warning .

quality: quality-js quality-python quality-rst ## Run linters

test-python: clean ## run tests in the current virtualenv
	pip install -e .
	py.test --cov=edx_proctoring --cov-report=html --ds=test_settings -n 3

test-js:
	gulp test

lint-js:
	./node_modules/.bin/eslint --ignore-pattern 'edx_proctoring/static/index.js' --ext .js --ext .jsx .
	./node_modules/.bin/eslint --config .eslintrc.worker.json 'edx_proctoring/static/index.js'

diff_cover: test
	diff-cover coverage.xml

## Localization targets

extract_translations: ## extract strings to be translated, outputting .mo files
	cd edx_proctoring && ../manage.py makemessages -l en -v1 -d django
	cd edx_proctoring && ../manage.py makemessages -l en -v1 -d djangojs

compile_translations: ## compile translation files, outputting .po files for each supported language
	cd edx_proctoring && ../manage.py compilemessages

detect_changed_source_translations:
	cd edx_proctoring && i18n_tool changed

pull_translations: ## pull translations from Transifex
	tx pull -af --mode reviewed --minimum-perc=1

push_translations: ## push source translation files (.po) from Transifex
	tx push -s

validate_translations: ## Test translation files
	cd edx_proctoring && i18n_tool validate -v

dummy_translations: ## generate dummy translation (.po) files
	cd edx_proctoring && i18n_tool dummy

install-js: ## install JavaScript dependencies
	npm install

build_dummy_translations: extract_translations dummy_translations compile_translations ## generate and compile dummy translation files

check_translations_up_to_date: build_dummy_translations detect_changed_source_translations ## validate translations

test: test-python test-js ## run tests
